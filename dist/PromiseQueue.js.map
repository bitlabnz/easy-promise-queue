{"version":3,"file":"PromiseQueue.js","sources":["../src/typeCheck.js","../src/PromiseQueue.js"],"sourcesContent":["export function isFunction (functionToCheck) {\r\n  return functionToCheck && Object.prototype.toString.call(functionToCheck) === '[object Function]';\r\n}\r\n\r\nexport function isArray (arrayToCheck) {\r\n  return arrayToCheck && Object.prototype.toString.call(arrayToCheck) === '[object Array]';\r\n}\r\n","import * as utils from './typeCheck';\r\n\r\nclass PromiseQueue {\r\n  constructor (opts) {\r\n    this._queue = [];\r\n    this._pause = false;\r\n    opts = Object.assign({\r\n      concurrency: 1,\r\n    }, opts);\r\n\r\n    if (opts.concurrency < 1) {\r\n      throw new TypeError('Expected `concurrency` to be an integer which is bigger than 0');\r\n    }\r\n\r\n    this._ongoingCount = 0;\r\n    this._concurrency = opts.concurrency;\r\n    this._resolveEmpty = () => {\r\n    };\r\n  }\r\n\r\n  _next () {\r\n    if (this._pause) {\r\n      return;\r\n    }\r\n\r\n    this._ongoingCount--;\r\n\r\n    if (this._queue.length > 0) {\r\n      this._queue.shift()();\r\n    } else {\r\n      this._resolveEmpty();\r\n    }\r\n  }\r\n\r\n  pause () {\r\n    this._pause = true;\r\n  }\r\n\r\n  resume () {\r\n    this._pause = false;\r\n    this._next();\r\n  }\r\n\r\n  prioritize (fn) {\r\n    return this.add(fn, true)\r\n  }\r\n\r\n  add (fn, isPriority) {\r\n    if (utils.isArray(fn) && fn.every(utils.isFunction)) {\r\n      return fn.length > 1 ? this.add(fn.shift()).add(fn) : this.add(fn[0]);\r\n    } else if (utils.isFunction(fn)) {\r\n      new Promise((resolve, reject) => {\r\n        const run = () => {\r\n          this._ongoingCount++;\r\n          fn().then(\r\n            val => {\r\n              resolve(val);\r\n              this._next();\r\n            },\r\n            err => {\r\n              reject(err);\r\n              this._next();\r\n            }\r\n          );\r\n        };\r\n\r\n        if (this._ongoingCount < this._concurrency && !this._pause) {\r\n          run();\r\n        } else {\r\n          // Process priority jobs next in line\r\n          isPriority ? this._queue.unshift(run) : this._queue.push(run)\r\n        }\r\n      });\r\n      return this;\r\n    } else {\r\n      throw new TypeError('Expected `arg` in add(arg) must be a function which return a Promise, or an array of function which return a Promise');\r\n    }\r\n  }\r\n\r\n  // Promises which are not ready yet to run in the queue.\r\n  get waitingCount () {\r\n    return this._queue.length;\r\n  }\r\n\r\n  // Promises which are running but not done.\r\n  get ongoingCount () {\r\n    return this._ongoingCount;\r\n  }\r\n}\r\n\r\nexport default PromiseQueue;"],"names":["isFunction","functionToCheck","Object","prototype","toString","call","opts","_queue","_pause","assign","concurrency","TypeError","_ongoingCount","_concurrency","_resolveEmpty","this","length","shift","_next","fn","add","isPriority","arrayToCheck","every","utils","Promise","resolve","reject","run","then","val","err","_this","unshift","push"],"mappings":"wLAAO,SAASA,EAAYC,UACnBA,GAAuE,sBAApDC,OAAOC,UAAUC,SAASC,KAAKJ,yRCE5CK,gHACNC,OAAS,QACTC,QAAS,KACPN,OAAOO,OAAO,aACN,GACZH,IAEMI,YAAc,QACf,IAAIC,UAAU,uEAGjBC,cAAgB,OAChBC,aAAeP,EAAKI,iBACpBI,cAAgB,uDAKjBC,KAAKP,cAIJI,gBAEoB,EAArBG,KAAKR,OAAOS,YACTT,OAAOU,eAEPH,sDAKFN,QAAS,wCAITA,QAAS,OACTU,2CAGKC,UACHJ,KAAKK,IAAID,GAAI,+BAGjBA,EAAIE,OD3CcC,aAAAA,EC4CHH,ID3CoD,mBAAjDjB,OAAOC,UAAUC,SAASC,KAAKiB,IC2C3BH,EAAGI,MAAMC,UACb,EAAZL,EAAGH,OAAaD,KAAKK,IAAID,EAAGF,SAASG,IAAID,GAAMJ,KAAKK,IAAID,EAAG,IAC7D,GAAIK,EAAiBL,cACtBM,QAAQ,SAACC,EAASC,OACdC,EAAM,aACLhB,oBACAiB,KACH,cACUC,KACHZ,SAEP,cACSa,KACFb,WAKPc,EAAKpB,cAAgBoB,EAAKnB,eAAiBmB,EAAKxB,aAIrCwB,EAAKzB,OAAO0B,QAAQL,GAAOI,EAAKzB,OAAO2B,KAAKN,KAGtDb,WAED,IAAIJ,UAAU,oKAMfI,KAAKR,OAAOS,mDAKZD,KAAKH"}